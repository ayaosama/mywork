
Keypad_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000730  000007c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080008a  0080008a  000007ee  2**0
                  ALLOC
  3 .stab         00000f48  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007e1  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 38       	cpi	r26, 0x8B	; 139
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4a 03 	call	0x694	; 0x694 <main>
  8a:	0c 94 96 03 	jmp	0x72c	; 0x72c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInit>:
static volatile u8* const DIO_u8DDRADD[DIO_u8PORTSIZE]={DIO_u8DDRA,DIO_u8DDRB,DIO_u8DDRC,DIO_u8DDRD};


/*Comment!: Initialization function */
void DIO_voidInit(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	*DIO_u8DDRA=DIO_u8PORT0DIR;
  9a:	ea e3       	ldi	r30, 0x3A	; 58
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	80 83       	st	Z, r24
	*DIO_u8DDRB=DIO_u8PORT1DIR;
  a2:	e7 e3       	ldi	r30, 0x37	; 55
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 83       	st	Z, r24
	*DIO_u8DDRC=DIO_u8PORT2DIR;
  aa:	e4 e3       	ldi	r30, 0x34	; 52
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	80 83       	st	Z, r24
	*DIO_u8DDRD=DIO_u8PORT3DIR;
  b2:	e1 e3       	ldi	r30, 0x31	; 49
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	80 83       	st	Z, r24

	*DIO_u8PORTA=(*DIO_u8PORTA & (~*DIO_u8DDRA)) | (DIO_u8PORT0DIR & DIO_u8PORT0INIT);
  ba:	ab e3       	ldi	r26, 0x3B	; 59
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	eb e3       	ldi	r30, 0x3B	; 59
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	98 2f       	mov	r25, r24
  c6:	ea e3       	ldi	r30, 0x3A	; 58
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 95       	com	r24
  ce:	89 23       	and	r24, r25
  d0:	8c 93       	st	X, r24
	*DIO_u8PORTB=(*DIO_u8PORTB & (~*DIO_u8DDRB)) | (DIO_u8PORT1DIR & DIO_u8PORT1INIT);
  d2:	a8 e3       	ldi	r26, 0x38	; 56
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e8 e3       	ldi	r30, 0x38	; 56
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	98 2f       	mov	r25, r24
  de:	e7 e3       	ldi	r30, 0x37	; 55
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 95       	com	r24
  e6:	89 23       	and	r24, r25
  e8:	8c 93       	st	X, r24
	*DIO_u8PORTC=(*DIO_u8PORTC & (~*DIO_u8DDRC)) | (DIO_u8PORT2DIR & DIO_u8PORT2INIT);
  ea:	a5 e3       	ldi	r26, 0x35	; 53
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	e5 e3       	ldi	r30, 0x35	; 53
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	98 2f       	mov	r25, r24
  f6:	e4 e3       	ldi	r30, 0x34	; 52
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 95       	com	r24
  fe:	89 23       	and	r24, r25
 100:	8c 93       	st	X, r24
	*DIO_u8PORTD=(*DIO_u8PORTD & (~*DIO_u8DDRD)) | (DIO_u8PORT3DIR & DIO_u8PORT3INIT);
 102:	a2 e3       	ldi	r26, 0x32	; 50
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e2 e3       	ldi	r30, 0x32	; 50
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	98 2f       	mov	r25, r24
 10e:	e1 e3       	ldi	r30, 0x31	; 49
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 95       	com	r24
 116:	89 23       	and	r24, r25
 118:	8c 93       	st	X, r24

	return;
}
 11a:	cf 91       	pop	r28
 11c:	df 91       	pop	r29
 11e:	08 95       	ret

00000120 <DIO_u8ReadPortVal>:



/*Comment!: Read Port Value */
extern u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx,u8* Copy_u8PtrToVal)
{
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	00 d0       	rcall	.+0      	; 0x126 <DIO_u8ReadPortVal+0x6>
 126:	00 d0       	rcall	.+0      	; 0x128 <DIO_u8ReadPortVal+0x8>
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	8a 83       	std	Y+2, r24	; 0x02
 12e:	7c 83       	std	Y+4, r23	; 0x04
 130:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Error=u8OK;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortIdx >= DIO_u8PORTSIZE)
 136:	8a 81       	ldd	r24, Y+2	; 0x02
 138:	84 30       	cpi	r24, 0x04	; 4
 13a:	10 f0       	brcs	.+4      	; 0x140 <DIO_u8ReadPortVal+0x20>
	{
		Local_u8Error=u8ERROR;
 13c:	19 82       	std	Y+1, r1	; 0x01
 13e:	0f c0       	rjmp	.+30     	; 0x15e <DIO_u8ReadPortVal+0x3e>
	}
	else
	{
		*Copy_u8PtrToVal=*(DIO_u8PINADD[Copy_u8PortIdx]);
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	88 2f       	mov	r24, r24
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	fc 01       	movw	r30, r24
 14c:	e7 59       	subi	r30, 0x97	; 151
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	01 90       	ld	r0, Z+
 152:	f0 81       	ld	r31, Z
 154:	e0 2d       	mov	r30, r0
 156:	80 81       	ld	r24, Z
 158:	eb 81       	ldd	r30, Y+3	; 0x03
 15a:	fc 81       	ldd	r31, Y+4	; 0x04
 15c:	80 83       	st	Z, r24
	}

	return Local_u8Error;
 15e:	89 81       	ldd	r24, Y+1	; 0x01
}
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	cf 91       	pop	r28
 16a:	df 91       	pop	r29
 16c:	08 95       	ret

0000016e <DIO_u8WritePortVal>:


/*Comment!: Write Port Value */
extern u8 DIO_u8WritePortVal(u8 Copy_u8PortIdx,u8 Copy_u8PortVal)
{
 16e:	df 93       	push	r29
 170:	cf 93       	push	r28
 172:	00 d0       	rcall	.+0      	; 0x174 <DIO_u8WritePortVal+0x6>
 174:	0f 92       	push	r0
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	8a 83       	std	Y+2, r24	; 0x02
 17c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Error=u8OK;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortIdx>=DIO_u8PORTSIZE)
 182:	8a 81       	ldd	r24, Y+2	; 0x02
 184:	84 30       	cpi	r24, 0x04	; 4
 186:	10 f0       	brcs	.+4      	; 0x18c <DIO_u8WritePortVal+0x1e>
		{
			Local_u8Error = u8ERROR;
 188:	19 82       	std	Y+1, r1	; 0x01
 18a:	0d c0       	rjmp	.+26     	; 0x1a6 <DIO_u8WritePortVal+0x38>
		}
	else
		{
			*(DIO_u8PORTADD[Copy_u8PortIdx]) = Copy_u8PortVal;
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	fc 01       	movw	r30, r24
 198:	ef 59       	subi	r30, 0x9F	; 159
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	01 90       	ld	r0, Z+
 19e:	f0 81       	ld	r31, Z
 1a0:	e0 2d       	mov	r30, r0
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	80 83       	st	Z, r24
		}

	return Local_u8Error;
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
}
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	cf 91       	pop	r28
 1b0:	df 91       	pop	r29
 1b2:	08 95       	ret

000001b4 <DIO_u8ReadPinVal>:



/*Comment!: Read Pin Value */
extern u8 DIO_u8ReadPinVal(u8 Copy_u8PinIdx,u8* Copy_u8PtrToVal)
{
 1b4:	df 93       	push	r29
 1b6:	cf 93       	push	r28
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <DIO_u8ReadPinVal+0x6>
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <DIO_u8ReadPinVal+0x8>
 1bc:	00 d0       	rcall	.+0      	; 0x1be <DIO_u8ReadPinVal+0xa>
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	8c 83       	std	Y+4, r24	; 0x04
 1c4:	7e 83       	std	Y+6, r23	; 0x06
 1c6:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error=u8OK;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinNum=Copy_u8PinIdx % DIO_u8PINPERPORT;
 1cc:	8c 81       	ldd	r24, Y+4	; 0x04
 1ce:	87 70       	andi	r24, 0x07	; 7
 1d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortNum=(u8)(Copy_u8PinIdx / DIO_u8PINPERPORT);
 1d2:	8c 81       	ldd	r24, Y+4	; 0x04
 1d4:	86 95       	lsr	r24
 1d6:	86 95       	lsr	r24
 1d8:	86 95       	lsr	r24
 1da:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinIdx>=DIO_u8PINSIZE)
 1dc:	8c 81       	ldd	r24, Y+4	; 0x04
 1de:	80 32       	cpi	r24, 0x20	; 32
 1e0:	10 f0       	brcs	.+4      	; 0x1e6 <DIO_u8ReadPinVal+0x32>
		{
			Local_u8Error = u8ERROR;
 1e2:	1b 82       	std	Y+3, r1	; 0x03
 1e4:	1c c0       	rjmp	.+56     	; 0x21e <DIO_u8ReadPinVal+0x6a>
		}
	else
		{
			*Copy_u8PtrToVal=GETBIT(*(DIO_u8PINADD[Local_u8PortNum]),Local_u8PinNum) ;
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	88 2f       	mov	r24, r24
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	fc 01       	movw	r30, r24
 1f2:	e7 59       	subi	r30, 0x97	; 151
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	01 90       	ld	r0, Z+
 1f8:	f0 81       	ld	r31, Z
 1fa:	e0 2d       	mov	r30, r0
 1fc:	80 81       	ld	r24, Z
 1fe:	28 2f       	mov	r18, r24
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	8a 81       	ldd	r24, Y+2	; 0x02
 204:	88 2f       	mov	r24, r24
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	a9 01       	movw	r20, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8ReadPinVal+0x5c>
 20c:	55 95       	asr	r21
 20e:	47 95       	ror	r20
 210:	8a 95       	dec	r24
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8ReadPinVal+0x58>
 214:	ca 01       	movw	r24, r20
 216:	81 70       	andi	r24, 0x01	; 1
 218:	ed 81       	ldd	r30, Y+5	; 0x05
 21a:	fe 81       	ldd	r31, Y+6	; 0x06
 21c:	80 83       	st	Z, r24
		}


	return Local_u8Error;
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
}
 220:	26 96       	adiw	r28, 0x06	; 6
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	cf 91       	pop	r28
 22e:	df 91       	pop	r29
 230:	08 95       	ret

00000232 <DIO_u8WritePinVal>:


/*Comment!: Write Pin Value */
extern u8 DIO_u8WritePinVal(u8 Copy_u8PinIdx,u8 Copy_u8PinVal)
{
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	00 d0       	rcall	.+0      	; 0x238 <DIO_u8WritePinVal+0x6>
 238:	00 d0       	rcall	.+0      	; 0x23a <DIO_u8WritePinVal+0x8>
 23a:	0f 92       	push	r0
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	8c 83       	std	Y+4, r24	; 0x04
 242:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error=u8OK;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinNum=Copy_u8PinIdx % DIO_u8PINPERPORT;
 248:	8c 81       	ldd	r24, Y+4	; 0x04
 24a:	87 70       	andi	r24, 0x07	; 7
 24c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortNum=(u8)(Copy_u8PinIdx / DIO_u8PINPERPORT);
 24e:	8c 81       	ldd	r24, Y+4	; 0x04
 250:	86 95       	lsr	r24
 252:	86 95       	lsr	r24
 254:	86 95       	lsr	r24
 256:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinIdx>=DIO_u8PINSIZE)
 258:	8c 81       	ldd	r24, Y+4	; 0x04
 25a:	80 32       	cpi	r24, 0x20	; 32
 25c:	10 f0       	brcs	.+4      	; 0x262 <DIO_u8WritePinVal+0x30>
		{
			Local_u8Error = u8ERROR;
 25e:	1b 82       	std	Y+3, r1	; 0x03
 260:	32 c0       	rjmp	.+100    	; 0x2c6 <DIO_u8WritePinVal+0x94>
		}
	else
		{
			ASSIGNBIT(*(DIO_u8PORTADD[Local_u8PortNum]),Local_u8PinNum,Copy_u8PinVal);
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	88 2f       	mov	r24, r24
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	fc 01       	movw	r30, r24
 26e:	ef 59       	subi	r30, 0x9F	; 159
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	a0 81       	ld	r26, Z
 274:	b1 81       	ldd	r27, Z+1	; 0x01
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	88 2f       	mov	r24, r24
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	fc 01       	movw	r30, r24
 282:	ef 59       	subi	r30, 0x9F	; 159
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	01 90       	ld	r0, Z+
 288:	f0 81       	ld	r31, Z
 28a:	e0 2d       	mov	r30, r0
 28c:	80 81       	ld	r24, Z
 28e:	48 2f       	mov	r20, r24
 290:	8a 81       	ldd	r24, Y+2	; 0x02
 292:	28 2f       	mov	r18, r24
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_u8WritePinVal+0x6e>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	2a 95       	dec	r18
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_u8WritePinVal+0x6a>
 2a4:	80 95       	com	r24
 2a6:	48 23       	and	r20, r24
 2a8:	8d 81       	ldd	r24, Y+5	; 0x05
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	88 2f       	mov	r24, r24
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	b9 01       	movw	r22, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_u8WritePinVal+0x8a>
 2b8:	66 0f       	add	r22, r22
 2ba:	77 1f       	adc	r23, r23
 2bc:	8a 95       	dec	r24
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_u8WritePinVal+0x86>
 2c0:	cb 01       	movw	r24, r22
 2c2:	84 2b       	or	r24, r20
 2c4:	8c 93       	st	X, r24
		}

		return Local_u8Error;
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
}
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	cf 91       	pop	r28
 2d4:	df 91       	pop	r29
 2d6:	08 95       	ret

000002d8 <DIO_u8WritePinDir>:


/*Comment!: Write Pin Direction */
extern u8 DIO_u8WritePinDir(u8 Copy_u8PinIdx,u8 Copy_u8PinDir)
{
 2d8:	df 93       	push	r29
 2da:	cf 93       	push	r28
 2dc:	00 d0       	rcall	.+0      	; 0x2de <DIO_u8WritePinDir+0x6>
 2de:	00 d0       	rcall	.+0      	; 0x2e0 <DIO_u8WritePinDir+0x8>
 2e0:	0f 92       	push	r0
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	8c 83       	std	Y+4, r24	; 0x04
 2e8:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error=u8OK;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinNum=Copy_u8PinIdx % DIO_u8PINPERPORT;
 2ee:	8c 81       	ldd	r24, Y+4	; 0x04
 2f0:	87 70       	andi	r24, 0x07	; 7
 2f2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortNum=(u8)(Copy_u8PinIdx / DIO_u8PINPERPORT);
 2f4:	8c 81       	ldd	r24, Y+4	; 0x04
 2f6:	86 95       	lsr	r24
 2f8:	86 95       	lsr	r24
 2fa:	86 95       	lsr	r24
 2fc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinIdx>=DIO_u8PINSIZE)
 2fe:	8c 81       	ldd	r24, Y+4	; 0x04
 300:	80 32       	cpi	r24, 0x20	; 32
 302:	10 f0       	brcs	.+4      	; 0x308 <DIO_u8WritePinDir+0x30>
		{
			Local_u8Error = u8ERROR;
 304:	1b 82       	std	Y+3, r1	; 0x03
 306:	32 c0       	rjmp	.+100    	; 0x36c <DIO_u8WritePinDir+0x94>
		}
	else
		{
			ASSIGNBIT(*(DIO_u8DDRADD[Local_u8PortNum]),Local_u8PinNum,Copy_u8PinDir);
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	88 2f       	mov	r24, r24
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	fc 01       	movw	r30, r24
 314:	ef 58       	subi	r30, 0x8F	; 143
 316:	ff 4f       	sbci	r31, 0xFF	; 255
 318:	a0 81       	ld	r26, Z
 31a:	b1 81       	ldd	r27, Z+1	; 0x01
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	fc 01       	movw	r30, r24
 328:	ef 58       	subi	r30, 0x8F	; 143
 32a:	ff 4f       	sbci	r31, 0xFF	; 255
 32c:	01 90       	ld	r0, Z+
 32e:	f0 81       	ld	r31, Z
 330:	e0 2d       	mov	r30, r0
 332:	80 81       	ld	r24, Z
 334:	48 2f       	mov	r20, r24
 336:	8a 81       	ldd	r24, Y+2	; 0x02
 338:	28 2f       	mov	r18, r24
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_u8WritePinDir+0x6e>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	2a 95       	dec	r18
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_u8WritePinDir+0x6a>
 34a:	80 95       	com	r24
 34c:	48 23       	and	r20, r24
 34e:	8d 81       	ldd	r24, Y+5	; 0x05
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	8a 81       	ldd	r24, Y+2	; 0x02
 356:	88 2f       	mov	r24, r24
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	b9 01       	movw	r22, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_u8WritePinDir+0x8a>
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	8a 95       	dec	r24
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_u8WritePinDir+0x86>
 366:	cb 01       	movw	r24, r22
 368:	84 2b       	or	r24, r20
 36a:	8c 93       	st	X, r24
		}

	return Local_u8Error;
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
}
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	cf 91       	pop	r28
 37a:	df 91       	pop	r29
 37c:	08 95       	ret

0000037e <DIO_u8WritePortDir>:


/*Comment!: Write Port Direction */
extern u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx,u8 Copy_u8PortDir)
{
 37e:	df 93       	push	r29
 380:	cf 93       	push	r28
 382:	00 d0       	rcall	.+0      	; 0x384 <DIO_u8WritePortDir+0x6>
 384:	0f 92       	push	r0
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	8a 83       	std	Y+2, r24	; 0x02
 38c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Error=u8OK;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortIdx>=DIO_u8PORTSIZE)
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	84 30       	cpi	r24, 0x04	; 4
 396:	10 f0       	brcs	.+4      	; 0x39c <DIO_u8WritePortDir+0x1e>
		{
			Local_u8Error = u8ERROR;
 398:	19 82       	std	Y+1, r1	; 0x01
 39a:	0d c0       	rjmp	.+26     	; 0x3b6 <DIO_u8WritePortDir+0x38>
		}
	else
		{
			*(DIO_u8DDRADD[Copy_u8PortIdx]) = Copy_u8PortDir;
 39c:	8a 81       	ldd	r24, Y+2	; 0x02
 39e:	88 2f       	mov	r24, r24
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	fc 01       	movw	r30, r24
 3a8:	ef 58       	subi	r30, 0x8F	; 143
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	01 90       	ld	r0, Z+
 3ae:	f0 81       	ld	r31, Z
 3b0:	e0 2d       	mov	r30, r0
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	80 83       	st	Z, r24
		}
		return Local_u8Error;
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
}
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	cf 91       	pop	r28
 3c0:	df 91       	pop	r29
 3c2:	08 95       	ret

000003c4 <DIO_u8ReadPinDir>:


/*Comment!: Read Pin Direction */
extern u8 DIO_u8ReadPinDir(u8 Copy_u8PinIdx,u8* Copy_u8PtrToDir)
{
 3c4:	df 93       	push	r29
 3c6:	cf 93       	push	r28
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <DIO_u8ReadPinDir+0x6>
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <DIO_u8ReadPinDir+0x8>
 3cc:	00 d0       	rcall	.+0      	; 0x3ce <DIO_u8ReadPinDir+0xa>
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
 3d2:	8c 83       	std	Y+4, r24	; 0x04
 3d4:	7e 83       	std	Y+6, r23	; 0x06
 3d6:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error=u8OK;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinNum=Copy_u8PinIdx % DIO_u8PINPERPORT;
 3dc:	8c 81       	ldd	r24, Y+4	; 0x04
 3de:	87 70       	andi	r24, 0x07	; 7
 3e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortNum=(u8)(Copy_u8PinIdx / DIO_u8PINPERPORT);
 3e2:	8c 81       	ldd	r24, Y+4	; 0x04
 3e4:	86 95       	lsr	r24
 3e6:	86 95       	lsr	r24
 3e8:	86 95       	lsr	r24
 3ea:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinIdx>=DIO_u8PINSIZE)
 3ec:	8c 81       	ldd	r24, Y+4	; 0x04
 3ee:	80 32       	cpi	r24, 0x20	; 32
 3f0:	10 f0       	brcs	.+4      	; 0x3f6 <DIO_u8ReadPinDir+0x32>
		{
			Local_u8Error = u8ERROR;
 3f2:	1b 82       	std	Y+3, r1	; 0x03
 3f4:	1c c0       	rjmp	.+56     	; 0x42e <DIO_u8ReadPinDir+0x6a>
		}
	else
		{
			*Copy_u8PtrToDir=GETBIT(*(DIO_u8DDRADD[Local_u8PortNum]),Local_u8PinNum) ;
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	88 2f       	mov	r24, r24
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	fc 01       	movw	r30, r24
 402:	ef 58       	subi	r30, 0x8F	; 143
 404:	ff 4f       	sbci	r31, 0xFF	; 255
 406:	01 90       	ld	r0, Z+
 408:	f0 81       	ld	r31, Z
 40a:	e0 2d       	mov	r30, r0
 40c:	80 81       	ld	r24, Z
 40e:	28 2f       	mov	r18, r24
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	8a 81       	ldd	r24, Y+2	; 0x02
 414:	88 2f       	mov	r24, r24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	a9 01       	movw	r20, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_u8ReadPinDir+0x5c>
 41c:	55 95       	asr	r21
 41e:	47 95       	ror	r20
 420:	8a 95       	dec	r24
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_u8ReadPinDir+0x58>
 424:	ca 01       	movw	r24, r20
 426:	81 70       	andi	r24, 0x01	; 1
 428:	ed 81       	ldd	r30, Y+5	; 0x05
 42a:	fe 81       	ldd	r31, Y+6	; 0x06
 42c:	80 83       	st	Z, r24
		}
	return Local_u8Error;
 42e:	8b 81       	ldd	r24, Y+3	; 0x03
}
 430:	26 96       	adiw	r28, 0x06	; 6
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	cf 91       	pop	r28
 43e:	df 91       	pop	r29
 440:	08 95       	ret

00000442 <DIO_u8ReadPortDir>:


/*Comment!: Read Port Direction */
extern u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx,u8* Copy_u8PtrToDir)
{
 442:	df 93       	push	r29
 444:	cf 93       	push	r28
 446:	00 d0       	rcall	.+0      	; 0x448 <DIO_u8ReadPortDir+0x6>
 448:	00 d0       	rcall	.+0      	; 0x44a <DIO_u8ReadPortDir+0x8>
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
 44e:	8a 83       	std	Y+2, r24	; 0x02
 450:	7c 83       	std	Y+4, r23	; 0x04
 452:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Error=u8OK;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortIdx >= DIO_u8PORTSIZE)
 458:	8a 81       	ldd	r24, Y+2	; 0x02
 45a:	84 30       	cpi	r24, 0x04	; 4
 45c:	10 f0       	brcs	.+4      	; 0x462 <DIO_u8ReadPortDir+0x20>
		{
			Local_u8Error=u8ERROR;
 45e:	19 82       	std	Y+1, r1	; 0x01
 460:	0f c0       	rjmp	.+30     	; 0x480 <DIO_u8ReadPortDir+0x3e>
		}
	else
		{
			*Copy_u8PtrToDir=*(DIO_u8DDRADD[Copy_u8PortIdx]);
 462:	8a 81       	ldd	r24, Y+2	; 0x02
 464:	88 2f       	mov	r24, r24
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	fc 01       	movw	r30, r24
 46e:	ef 58       	subi	r30, 0x8F	; 143
 470:	ff 4f       	sbci	r31, 0xFF	; 255
 472:	01 90       	ld	r0, Z+
 474:	f0 81       	ld	r31, Z
 476:	e0 2d       	mov	r30, r0
 478:	80 81       	ld	r24, Z
 47a:	eb 81       	ldd	r30, Y+3	; 0x03
 47c:	fc 81       	ldd	r31, Y+4	; 0x04
 47e:	80 83       	st	Z, r24
		}
	return Local_u8Error;
 480:	89 81       	ldd	r24, Y+1	; 0x01
}
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	0f 90       	pop	r0
 48a:	cf 91       	pop	r28
 48c:	df 91       	pop	r29
 48e:	08 95       	ret

00000490 <Check_u8SwitchState>:
#include "Keypad_private.h"

const u8 Rows_u8Arr[Keypad_u8RowsCount]={Keypad_u8Row1,Keypad_u8Row2,Keypad_u8Row3,Keypad_u8Row4};
const u8 Cols_u8Arr[Keypad_u8ColsCount]={Keypad_u8Col1,Keypad_u8Col2,Keypad_u8Col3,Keypad_u8Col4};
extern u8 Check_u8SwitchState(u8 Copy_u8SwitchIdx)
{
 490:	df 93       	push	r29
 492:	cf 93       	push	r28
 494:	00 d0       	rcall	.+0      	; 0x496 <Check_u8SwitchState+0x6>
 496:	00 d0       	rcall	.+0      	; 0x498 <Check_u8SwitchState+0x8>
 498:	00 d0       	rcall	.+0      	; 0x49a <Check_u8SwitchState+0xa>
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
 49e:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8SwitchState=u8RELEASED;
 4a0:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8ReturnVal=u8ERROR;
 4a2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter=0;
 4a4:	19 82       	std	Y+1, r1	; 0x01

	DIO_u8ReadPinVal(Copy_u8SwitchIdx,&Local_u8SwitchState);
 4a6:	9e 01       	movw	r18, r28
 4a8:	2d 5f       	subi	r18, 0xFD	; 253
 4aa:	3f 4f       	sbci	r19, 0xFF	; 255
 4ac:	8c 81       	ldd	r24, Y+4	; 0x04
 4ae:	b9 01       	movw	r22, r18
 4b0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_u8ReadPinVal>
	if (Local_u8SwitchState==u8PRESSED)
 4b4:	8b 81       	ldd	r24, Y+3	; 0x03
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	21 f5       	brne	.+72     	; 0x502 <Check_u8SwitchState+0x72>
	{
		if (Local_u8Counter<50)
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	82 33       	cpi	r24, 0x32	; 50
 4be:	20 f4       	brcc	.+8      	; 0x4c8 <Check_u8SwitchState+0x38>
		{
			Local_u8Counter++;
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	8f 5f       	subi	r24, 0xFF	; 255
 4c4:	89 83       	std	Y+1, r24	; 0x01
 4c6:	0b c0       	rjmp	.+22     	; 0x4de <Check_u8SwitchState+0x4e>
		}
		else if (Local_u8Counter==50)
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	82 33       	cpi	r24, 0x32	; 50
 4cc:	41 f4       	brne	.+16     	; 0x4de <Check_u8SwitchState+0x4e>
		{
//			DELAY_voidDELAY(10);
			DIO_u8ReadPinVal(Copy_u8SwitchIdx,&Local_u8SwitchState);
 4ce:	9e 01       	movw	r18, r28
 4d0:	2d 5f       	subi	r18, 0xFD	; 253
 4d2:	3f 4f       	sbci	r19, 0xFF	; 255
 4d4:	8c 81       	ldd	r24, Y+4	; 0x04
 4d6:	b9 01       	movw	r22, r18
 4d8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_u8ReadPinVal>
			Local_u8Counter=0;
 4dc:	19 82       	std	Y+1, r1	; 0x01
		}
	switch (Local_u8SwitchState)
 4de:	8b 81       	ldd	r24, Y+3	; 0x03
 4e0:	28 2f       	mov	r18, r24
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	3e 83       	std	Y+6, r19	; 0x06
 4e6:	2d 83       	std	Y+5, r18	; 0x05
 4e8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ea:	9e 81       	ldd	r25, Y+6	; 0x06
 4ec:	00 97       	sbiw	r24, 0x00	; 0
 4ee:	41 f0       	breq	.+16     	; 0x500 <Check_u8SwitchState+0x70>
 4f0:	2d 81       	ldd	r18, Y+5	; 0x05
 4f2:	3e 81       	ldd	r19, Y+6	; 0x06
 4f4:	21 30       	cpi	r18, 0x01	; 1
 4f6:	31 05       	cpc	r19, r1
 4f8:	21 f4       	brne	.+8      	; 0x502 <Check_u8SwitchState+0x72>
	{
	case u8PRESSED:
		 Local_u8ReturnVal=u8PRESSED;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	8a 83       	std	Y+2, r24	; 0x02
 4fe:	01 c0       	rjmp	.+2      	; 0x502 <Check_u8SwitchState+0x72>
		 break;
	case u8RELEASED:
		Local_u8ReturnVal=u8RELEASED;
 500:	1a 82       	std	Y+2, r1	; 0x02
		 break;
//	default:
//		Local_u8ReturnVal=u8RELEASED;
	}
	}
	return Local_u8ReturnVal;
 502:	8a 81       	ldd	r24, Y+2	; 0x02

}
 504:	26 96       	adiw	r28, 0x06	; 6
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	cd bf       	out	0x3d, r28	; 61
 510:	cf 91       	pop	r28
 512:	df 91       	pop	r29
 514:	08 95       	ret

00000516 <Keypad_u8Read>:

extern u8 Keypad_u8Read(void)
{
 516:	df 93       	push	r29
 518:	cf 93       	push	r28
 51a:	00 d0       	rcall	.+0      	; 0x51c <Keypad_u8Read+0x6>
 51c:	00 d0       	rcall	.+0      	; 0x51e <Keypad_u8Read+0x8>
 51e:	0f 92       	push	r0
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8LoopRowCounter=0;
 524:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8LoopCounter=0;
 526:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8LoopColCounter=0;
 528:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8SwitchState=0;
 52a:	1a 82       	std	Y+2, r1	; 0x02
	static u8 Local_u8ReturnNum=1;
	u8 x=0;
 52c:	19 82       	std	Y+1, r1	; 0x01
	for (Local_u8LoopRowCounter=0;Local_u8LoopRowCounter<4;Local_u8LoopRowCounter++)
 52e:	1d 82       	std	Y+5, r1	; 0x05
 530:	41 c0       	rjmp	.+130    	; 0x5b4 <Keypad_u8Read+0x9e>
	{
		for (Local_u8LoopCounter=0;Local_u8LoopCounter<4;Local_u8LoopCounter++)
 532:	1c 82       	std	Y+4, r1	; 0x04
 534:	0d c0       	rjmp	.+26     	; 0x550 <Keypad_u8Read+0x3a>
			{ DIO_u8WritePinVal(Rows_u8Arr[Local_u8LoopCounter],DIO_u8LOW);}
 536:	8c 81       	ldd	r24, Y+4	; 0x04
 538:	88 2f       	mov	r24, r24
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	fc 01       	movw	r30, r24
 53e:	e7 58       	subi	r30, 0x87	; 135
 540:	ff 4f       	sbci	r31, 0xFF	; 255
 542:	80 81       	ld	r24, Z
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	0e 94 19 01 	call	0x232	; 0x232 <DIO_u8WritePinVal>
	u8 Local_u8SwitchState=0;
	static u8 Local_u8ReturnNum=1;
	u8 x=0;
	for (Local_u8LoopRowCounter=0;Local_u8LoopRowCounter<4;Local_u8LoopRowCounter++)
	{
		for (Local_u8LoopCounter=0;Local_u8LoopCounter<4;Local_u8LoopCounter++)
 54a:	8c 81       	ldd	r24, Y+4	; 0x04
 54c:	8f 5f       	subi	r24, 0xFF	; 255
 54e:	8c 83       	std	Y+4, r24	; 0x04
 550:	8c 81       	ldd	r24, Y+4	; 0x04
 552:	84 30       	cpi	r24, 0x04	; 4
 554:	80 f3       	brcs	.-32     	; 0x536 <Keypad_u8Read+0x20>
			{ DIO_u8WritePinVal(Rows_u8Arr[Local_u8LoopCounter],DIO_u8LOW);}
		DIO_u8WritePinVal(Rows_u8Arr[Local_u8LoopRowCounter],DIO_u8HIGH);
 556:	8d 81       	ldd	r24, Y+5	; 0x05
 558:	88 2f       	mov	r24, r24
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	fc 01       	movw	r30, r24
 55e:	e7 58       	subi	r30, 0x87	; 135
 560:	ff 4f       	sbci	r31, 0xFF	; 255
 562:	80 81       	ld	r24, Z
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	0e 94 19 01 	call	0x232	; 0x232 <DIO_u8WritePinVal>
		for (Local_u8LoopColCounter=0;Local_u8LoopColCounter<4;Local_u8LoopColCounter++)
 56a:	1b 82       	std	Y+3, r1	; 0x03
 56c:	1d c0       	rjmp	.+58     	; 0x5a8 <Keypad_u8Read+0x92>
		{
			x=Check_u8SwitchState(Cols_u8Arr[Local_u8LoopColCounter]);
 56e:	8b 81       	ldd	r24, Y+3	; 0x03
 570:	88 2f       	mov	r24, r24
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	fc 01       	movw	r30, r24
 576:	e3 58       	subi	r30, 0x83	; 131
 578:	ff 4f       	sbci	r31, 0xFF	; 255
 57a:	80 81       	ld	r24, Z
 57c:	0e 94 48 02 	call	0x490	; 0x490 <Check_u8SwitchState>
 580:	89 83       	std	Y+1, r24	; 0x01

			if(x==u8PRESSED)
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	69 f4       	brne	.+26     	; 0x5a2 <Keypad_u8Read+0x8c>
			{

				Local_u8ReturnNum=Local_u8LoopRowCounter*4+Local_u8LoopColCounter+1;
 588:	8d 81       	ldd	r24, Y+5	; 0x05
 58a:	88 2f       	mov	r24, r24
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	98 2f       	mov	r25, r24
 598:	8b 81       	ldd	r24, Y+3	; 0x03
 59a:	89 0f       	add	r24, r25
 59c:	8f 5f       	subi	r24, 0xFF	; 255
 59e:	80 93 60 00 	sts	0x0060, r24
	for (Local_u8LoopRowCounter=0;Local_u8LoopRowCounter<4;Local_u8LoopRowCounter++)
	{
		for (Local_u8LoopCounter=0;Local_u8LoopCounter<4;Local_u8LoopCounter++)
			{ DIO_u8WritePinVal(Rows_u8Arr[Local_u8LoopCounter],DIO_u8LOW);}
		DIO_u8WritePinVal(Rows_u8Arr[Local_u8LoopRowCounter],DIO_u8HIGH);
		for (Local_u8LoopColCounter=0;Local_u8LoopColCounter<4;Local_u8LoopColCounter++)
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	8f 5f       	subi	r24, 0xFF	; 255
 5a6:	8b 83       	std	Y+3, r24	; 0x03
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	84 30       	cpi	r24, 0x04	; 4
 5ac:	00 f3       	brcs	.-64     	; 0x56e <Keypad_u8Read+0x58>
	u8 Local_u8LoopCounter=0;
	u8 Local_u8LoopColCounter=0;
	u8 Local_u8SwitchState=0;
	static u8 Local_u8ReturnNum=1;
	u8 x=0;
	for (Local_u8LoopRowCounter=0;Local_u8LoopRowCounter<4;Local_u8LoopRowCounter++)
 5ae:	8d 81       	ldd	r24, Y+5	; 0x05
 5b0:	8f 5f       	subi	r24, 0xFF	; 255
 5b2:	8d 83       	std	Y+5, r24	; 0x05
 5b4:	8d 81       	ldd	r24, Y+5	; 0x05
 5b6:	84 30       	cpi	r24, 0x04	; 4
 5b8:	08 f4       	brcc	.+2      	; 0x5bc <Keypad_u8Read+0xa6>
 5ba:	bb cf       	rjmp	.-138    	; 0x532 <Keypad_u8Read+0x1c>

				Local_u8ReturnNum=Local_u8LoopRowCounter*4+Local_u8LoopColCounter+1;
			}
		}
	}
	return Local_u8ReturnNum;
 5bc:	80 91 60 00 	lds	r24, 0x0060
}
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
 5c8:	0f 90       	pop	r0
 5ca:	cf 91       	pop	r28
 5cc:	df 91       	pop	r29
 5ce:	08 95       	ret

000005d0 <Stepper_Speed>:
#include "keypad_config.h"
#include "Keypad_private.h"

const u8 ArrOfPins[4] = { STEPPERPIN1, STEPPERPIN2, STEPPERPIN3, STEPPERPIN4 };
const u8 ArrOfPinsRev[4] ={ STEPPERPIN4, STEPPERPIN3, STEPPERPIN2, STEPPERPIN1 };
extern void Stepper_Speed(u8 Copy_u8MotorDir) {
 5d0:	df 93       	push	r29
 5d2:	cf 93       	push	r28
 5d4:	00 d0       	rcall	.+0      	; 0x5d6 <Stepper_Speed+0x6>
 5d6:	cd b7       	in	r28, 0x3d	; 61
 5d8:	de b7       	in	r29, 0x3e	; 62
 5da:	8a 83       	std	Y+2, r24	; 0x02
	static u8 Local_u8LoopCounter1 = 0;
	u8 Local_u8LoopCounter2 = 0;
 5dc:	19 82       	std	Y+1, r1	; 0x01
	for (Local_u8LoopCounter2 = 0; Local_u8LoopCounter2 < 4;	Local_u8LoopCounter2++) {
 5de:	19 82       	std	Y+1, r1	; 0x01
 5e0:	0d c0       	rjmp	.+26     	; 0x5fc <Stepper_Speed+0x2c>
		DIO_u8WritePinVal(ArrOfPins[Local_u8LoopCounter2], DIO_u8LOW);
 5e2:	89 81       	ldd	r24, Y+1	; 0x01
 5e4:	88 2f       	mov	r24, r24
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	fc 01       	movw	r30, r24
 5ea:	ef 57       	subi	r30, 0x7F	; 127
 5ec:	ff 4f       	sbci	r31, 0xFF	; 255
 5ee:	80 81       	ld	r24, Z
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	0e 94 19 01 	call	0x232	; 0x232 <DIO_u8WritePinVal>
const u8 ArrOfPins[4] = { STEPPERPIN1, STEPPERPIN2, STEPPERPIN3, STEPPERPIN4 };
const u8 ArrOfPinsRev[4] ={ STEPPERPIN4, STEPPERPIN3, STEPPERPIN2, STEPPERPIN1 };
extern void Stepper_Speed(u8 Copy_u8MotorDir) {
	static u8 Local_u8LoopCounter1 = 0;
	u8 Local_u8LoopCounter2 = 0;
	for (Local_u8LoopCounter2 = 0; Local_u8LoopCounter2 < 4;	Local_u8LoopCounter2++) {
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	8f 5f       	subi	r24, 0xFF	; 255
 5fa:	89 83       	std	Y+1, r24	; 0x01
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	84 30       	cpi	r24, 0x04	; 4
 600:	80 f3       	brcs	.-32     	; 0x5e2 <Stepper_Speed+0x12>
		DIO_u8WritePinVal(ArrOfPins[Local_u8LoopCounter2], DIO_u8LOW);

	}

	if (Copy_u8MotorDir == u8FORWARD) {
 602:	8a 81       	ldd	r24, Y+2	; 0x02
 604:	88 23       	and	r24, r24
 606:	61 f4       	brne	.+24     	; 0x620 <Stepper_Speed+0x50>
		DIO_u8WritePinVal(ArrOfPins[Local_u8LoopCounter1], DIO_u8HIGH);
 608:	80 91 8a 00 	lds	r24, 0x008A
 60c:	88 2f       	mov	r24, r24
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	fc 01       	movw	r30, r24
 612:	ef 57       	subi	r30, 0x7F	; 127
 614:	ff 4f       	sbci	r31, 0xFF	; 255
 616:	80 81       	ld	r24, Z
 618:	61 e0       	ldi	r22, 0x01	; 1
 61a:	0e 94 19 01 	call	0x232	; 0x232 <DIO_u8WritePinVal>
 61e:	0e c0       	rjmp	.+28     	; 0x63c <Stepper_Speed+0x6c>
	} else if (Copy_u8MotorDir ==u8REVERSE) {
 620:	8a 81       	ldd	r24, Y+2	; 0x02
 622:	81 30       	cpi	r24, 0x01	; 1
 624:	59 f4       	brne	.+22     	; 0x63c <Stepper_Speed+0x6c>
	DIO_u8WritePinVal(ArrOfPinsRev[Local_u8LoopCounter1], DIO_u8HIGH);
 626:	80 91 8a 00 	lds	r24, 0x008A
 62a:	88 2f       	mov	r24, r24
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	fc 01       	movw	r30, r24
 630:	eb 57       	subi	r30, 0x7B	; 123
 632:	ff 4f       	sbci	r31, 0xFF	; 255
 634:	80 81       	ld	r24, Z
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	0e 94 19 01 	call	0x232	; 0x232 <DIO_u8WritePinVal>
	}

	//DIO_u8WritePinVal(ArrOfPins[Local_u8LoopCounter1], DIO_u8HIGH);
	Local_u8LoopCounter1++;
 63c:	80 91 8a 00 	lds	r24, 0x008A
 640:	8f 5f       	subi	r24, 0xFF	; 255
 642:	80 93 8a 00 	sts	0x008A, r24
	Local_u8LoopCounter1 = Local_u8LoopCounter1 % 4;
 646:	80 91 8a 00 	lds	r24, 0x008A
 64a:	83 70       	andi	r24, 0x03	; 3
 64c:	80 93 8a 00 	sts	0x008A, r24

}
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	cf 91       	pop	r28
 656:	df 91       	pop	r29
 658:	08 95       	ret

0000065a <Stepper_Stop>:
//					DIO_u8WritePinVal(ArrOfPins[Local_u8LoopCounter1],DIO_u8HIGH);
//					Local_u8LoopCounter1--;
//					Local_u8LoopCounter1=Local_u8LoopCounter1%4;
//}

extern void Stepper_Stop(void) {
 65a:	df 93       	push	r29
 65c:	cf 93       	push	r28
 65e:	0f 92       	push	r0
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
	s8 Local_u8LoopCounter = 0;
 664:	19 82       	std	Y+1, r1	; 0x01

	for (Local_u8LoopCounter = 0; Local_u8LoopCounter < 4;
 666:	19 82       	std	Y+1, r1	; 0x01
 668:	0e c0       	rjmp	.+28     	; 0x686 <Stepper_Stop+0x2c>
			Local_u8LoopCounter++) {
		DIO_u8WritePinVal(ArrOfPinsRev[Local_u8LoopCounter], DIO_u8LOW);
 66a:	89 81       	ldd	r24, Y+1	; 0x01
 66c:	99 27       	eor	r25, r25
 66e:	87 fd       	sbrc	r24, 7
 670:	90 95       	com	r25
 672:	fc 01       	movw	r30, r24
 674:	eb 57       	subi	r30, 0x7B	; 123
 676:	ff 4f       	sbci	r31, 0xFF	; 255
 678:	80 81       	ld	r24, Z
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	0e 94 19 01 	call	0x232	; 0x232 <DIO_u8WritePinVal>

extern void Stepper_Stop(void) {
	s8 Local_u8LoopCounter = 0;

	for (Local_u8LoopCounter = 0; Local_u8LoopCounter < 4;
			Local_u8LoopCounter++) {
 680:	89 81       	ldd	r24, Y+1	; 0x01
 682:	8f 5f       	subi	r24, 0xFF	; 255
 684:	89 83       	std	Y+1, r24	; 0x01
//}

extern void Stepper_Stop(void) {
	s8 Local_u8LoopCounter = 0;

	for (Local_u8LoopCounter = 0; Local_u8LoopCounter < 4;
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	84 30       	cpi	r24, 0x04	; 4
 68a:	7c f3       	brlt	.-34     	; 0x66a <Stepper_Stop+0x10>
			Local_u8LoopCounter++) {
		DIO_u8WritePinVal(ArrOfPinsRev[Local_u8LoopCounter], DIO_u8LOW);
	}

}
 68c:	0f 90       	pop	r0
 68e:	cf 91       	pop	r28
 690:	df 91       	pop	r29
 692:	08 95       	ret

00000694 <main>:
#include "DIO_interface.h"
#include "Delay.h"
#include "Keypad_interface.h"
#include "Stepper.h"

int main(void) {
 694:	df 93       	push	r29
 696:	cf 93       	push	r28
 698:	00 d0       	rcall	.+0      	; 0x69a <main+0x6>
 69a:	00 d0       	rcall	.+0      	; 0x69c <main+0x8>
 69c:	cd b7       	in	r28, 0x3d	; 61
 69e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8KeypadReading = 0;
 6a0:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8MaxCounter = 0;
 6a2:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Counter = 0;
 6a4:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8MotorDir = u8FORWARD;
 6a6:	19 82       	std	Y+1, r1	; 0x01
	DIO_voidInit();
 6a8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInit>

	while (1) {
//		//Stepper_Stop();
		Local_u8KeypadReading = Keypad_u8Read();
 6ac:	0e 94 8b 02 	call	0x516	; 0x516 <Keypad_u8Read>
 6b0:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8MaxCounter = (320 / Local_u8KeypadReading);
 6b2:	8c 81       	ldd	r24, Y+4	; 0x04
 6b4:	28 2f       	mov	r18, r24
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	80 e4       	ldi	r24, 0x40	; 64
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	b9 01       	movw	r22, r18
 6be:	0e 94 6f 03 	call	0x6de	; 0x6de <__divmodhi4>
 6c2:	cb 01       	movw	r24, r22
 6c4:	8b 83       	std	Y+3, r24	; 0x03
		Local_u8Counter++;
 6c6:	8a 81       	ldd	r24, Y+2	; 0x02
 6c8:	8f 5f       	subi	r24, 0xFF	; 255
 6ca:	8a 83       	std	Y+2, r24	; 0x02
	if (Local_u8Counter >= Local_u8MaxCounter) {
 6cc:	9a 81       	ldd	r25, Y+2	; 0x02
 6ce:	8b 81       	ldd	r24, Y+3	; 0x03
 6d0:	98 17       	cp	r25, r24
 6d2:	60 f3       	brcs	.-40     	; 0x6ac <main+0x18>
//			}
//		}
//	Stepper_Speed(Local_u8KeypadReading);
//DELAY_voidDELAY(300);
//Stepper_Reverse();
		DIO_u8WritePortVal(2, Local_u8KeypadReading);}
 6d4:	82 e0       	ldi	r24, 0x02	; 2
 6d6:	6c 81       	ldd	r22, Y+4	; 0x04
 6d8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_u8WritePortVal>
 6dc:	e7 cf       	rjmp	.-50     	; 0x6ac <main+0x18>

000006de <__divmodhi4>:
 6de:	97 fb       	bst	r25, 7
 6e0:	09 2e       	mov	r0, r25
 6e2:	07 26       	eor	r0, r23
 6e4:	0a d0       	rcall	.+20     	; 0x6fa <__divmodhi4_neg1>
 6e6:	77 fd       	sbrc	r23, 7
 6e8:	04 d0       	rcall	.+8      	; 0x6f2 <__divmodhi4_neg2>
 6ea:	0c d0       	rcall	.+24     	; 0x704 <__udivmodhi4>
 6ec:	06 d0       	rcall	.+12     	; 0x6fa <__divmodhi4_neg1>
 6ee:	00 20       	and	r0, r0
 6f0:	1a f4       	brpl	.+6      	; 0x6f8 <__divmodhi4_exit>

000006f2 <__divmodhi4_neg2>:
 6f2:	70 95       	com	r23
 6f4:	61 95       	neg	r22
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255

000006f8 <__divmodhi4_exit>:
 6f8:	08 95       	ret

000006fa <__divmodhi4_neg1>:
 6fa:	f6 f7       	brtc	.-4      	; 0x6f8 <__divmodhi4_exit>
 6fc:	90 95       	com	r25
 6fe:	81 95       	neg	r24
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	08 95       	ret

00000704 <__udivmodhi4>:
 704:	aa 1b       	sub	r26, r26
 706:	bb 1b       	sub	r27, r27
 708:	51 e1       	ldi	r21, 0x11	; 17
 70a:	07 c0       	rjmp	.+14     	; 0x71a <__udivmodhi4_ep>

0000070c <__udivmodhi4_loop>:
 70c:	aa 1f       	adc	r26, r26
 70e:	bb 1f       	adc	r27, r27
 710:	a6 17       	cp	r26, r22
 712:	b7 07       	cpc	r27, r23
 714:	10 f0       	brcs	.+4      	; 0x71a <__udivmodhi4_ep>
 716:	a6 1b       	sub	r26, r22
 718:	b7 0b       	sbc	r27, r23

0000071a <__udivmodhi4_ep>:
 71a:	88 1f       	adc	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	5a 95       	dec	r21
 720:	a9 f7       	brne	.-22     	; 0x70c <__udivmodhi4_loop>
 722:	80 95       	com	r24
 724:	90 95       	com	r25
 726:	bc 01       	movw	r22, r24
 728:	cd 01       	movw	r24, r26
 72a:	08 95       	ret

0000072c <_exit>:
 72c:	f8 94       	cli

0000072e <__stop_program>:
 72e:	ff cf       	rjmp	.-2      	; 0x72e <__stop_program>
